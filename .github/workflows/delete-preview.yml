name: Delete PR Preview

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  delete-preview:
    # Only run if the PR was closed without merging
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - name: Delete preview from gh-pages
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create a temporary directory for gh-pages content
          mkdir -p /tmp/gh-pages
          cd /tmp/gh-pages

          # Clone the gh-pages branch
          git clone --branch gh-pages --single-branch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git . || {
            echo "gh-pages branch does not exist or is empty"
            exit 0
          }

          # Check if preview directory exists
          if [ -d "preview/pr${{ github.event.number }}" ]; then
            # Remove the preview directory
            rm -rf preview/pr${{ github.event.number }}

            # Remove empty preview parent directory if it's empty
            if [ -d "preview" ] && [ -z "$(ls -A preview)" ]; then
              rm -rf preview
            fi

            # Add and commit changes
            git add -A
            git commit -m "Remove preview for PR #${{ github.event.number }}" || {
              echo "No changes to commit"
              exit 0
            }

            # Push changes
            git push origin gh-pages

            echo "Preview for PR #${{ github.event.number }} successfully deleted"
          else
            echo "Preview directory for PR #${{ github.event.number }} does not exist"
          fi

      - name: Comment on PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            const comment = `ðŸ§¹ **Preview cleaned up!**

            The preview deployment for this PR has been removed from GitHub Pages.`;

            await github.rest.issues.createComment({
              owner: repoOwner,
              repo: repoName,
              issue_number: prNumber,
              body: comment
            });
