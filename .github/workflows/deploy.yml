name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  cleanup-merged-pr:
    # Clean up preview when PR is merged (runs before deploy)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Get merged PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 1
            });
            
            const commitMessage = commits.data[0].commit.message;
            const prMatch = commitMessage.match(/Merge pull request #(\d+)/);
            
            if (prMatch) {
              const prNumber = prMatch[1];
              console.log(`Found merged PR: ${prNumber}`);
              return prNumber;
            }
            
            console.log('No merged PR found in commit message');
            return null;
        
      - name: Cleanup merged PR preview
        if: steps.pr.outputs.result != 'null'
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create a temporary directory for gh-pages content
          mkdir -p /tmp/gh-pages
          cd /tmp/gh-pages

          # Clone the gh-pages branch
          git clone --branch gh-pages --single-branch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git . || {
            echo "gh-pages branch does not exist or is empty"
            exit 0
          }

          # Check if preview directory exists
          if [ -d "preview/pr${{ steps.pr.outputs.result }}" ]; then
            # Remove the preview directory
            rm -rf preview/pr${{ steps.pr.outputs.result }}

            # Remove empty preview parent directory if it's empty
            if [ -d "preview" ] && [ -z "$(ls -A preview)" ]; then
              rm -rf preview
            fi

            # Add and commit changes
            git add -A
            git commit -m "Remove preview for merged PR #${{ steps.pr.outputs.result }}" || {
              echo "No changes to commit"
              exit 0
            }

            # Push changes
            git push origin gh-pages

            echo "Preview for merged PR #${{ steps.pr.outputs.result }} successfully deleted"
          else
            echo "Preview directory for PR #${{ steps.pr.outputs.result }} does not exist"
          fi

  deploy:
    needs: cleanup-merged-pr
    # Always run deploy job, even if cleanup is skipped
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to gh-pages
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create a temporary directory for gh-pages content
          mkdir -p /tmp/gh-pages
          cd /tmp/gh-pages

          # Try to clone the gh-pages branch, create it if it doesn't exist
          if git clone --branch gh-pages --single-branch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git . 2>/dev/null; then
            echo "gh-pages branch exists, using existing content"
            # Remove all files except preview directory to avoid conflicts
            find . -maxdepth 1 -not -name '.git' -not -name 'preview' -not -name '.' -not -name '..' -exec rm -rf {} +
          else
            echo "gh-pages branch doesn't exist, creating new one"
            git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
            git checkout --orphan gh-pages
            git rm -rf . || true
          fi

          # Verify dist directory exists
          if [ ! -d "${{ github.workspace }}/dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi

          # Copy built files to root (preserving preview directory if it exists)
          cp -r ${{ github.workspace }}/dist/* .

          # Add and commit changes
          git add .
          if git commit -m "Deploy main site from commit ${{ github.sha }}"; then
            echo "Changes committed successfully"
          else
            echo "No changes to commit"
            exit 0
          fi

          # Push changes
          git push origin gh-pages
